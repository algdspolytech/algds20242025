#pragma once
#ifndef __MEMALLOCATOR_H__E71A34CB
#define __MEMALLOCATOR_H__E71A34CB
#include "gtest/gtest.h"
#ifdef __cplusplus
extern void* memory_pool;
extern int memory_pool_size;
extern MemoryBlock* free_list;
extern "C" {
#endif

	/**
	 * Инициализирует систему управления памятью на заданной области памяти.
	 *
	 * @param pMemory Указатель на область памяти, которая будет использоваться для выделения блоков.
	 * @param size Размер области памяти в байтах.
	 * @return 1, если инициализация успешна, 0 в случае ошибки.
	 */
	int meminit(void* pMemory, int size);

	/**
	 * Освобождает ресурсы аллокатора. Эта функция может использоваться для
	 * выполнения проверок на утечки памяти или для очистки состояния системы.
	 */
	void memdone();

	/**
	 * Выделяет блок памяти заданного размера.
	 *
	 * @param size Размер требуемого блока памяти в байтах.
	 * @return Указатель на выделенный блок памяти, если выделение успешно.
	 *         Возвращает 0 (NULL), если выделение невозможно.
	 */
	void* memalloc(int size);

	/**
	 * Освобождает ранее выделенный блок памяти.
	 *
	 * @param p Указатель на блок памяти, выделенный функцией memalloc.
	 */
	void memfree(void* p);

	/**
	 * Возвращает минимальный размер области памяти, необходимой для корректной работы аллокатора.
	 *
	 * Эта функция полезна, чтобы определить, сколько памяти требуется для
	 * выделения хотя бы одного блока памяти с минимальной метаинформацией.
	 *
	 * @return Минимальный размер области памяти в байтах.
	 */
	int memgetminimumsize();

	/**
	 * Возвращает размер метаинформации, который используется для управления каждым выделенным блоком.
	 *
	 * Эта функция полезна для расчета общей необходимой памяти.
	 *
	 * @return Размер метаинформации в байтах.
	 */
	int memgetblocksize();

#ifdef __cplusplus
}
#endif

#endif // __MEMALLOCATOR_H__E71A34CB